@page "/CustomersList"
@layout MainLayout

@using Microsoft.EntityFrameworkCore
@using PayNowBlazor.Components.Layout
@using PayNowBlazor.Infrastructure
@using PayNowBlazor.Infrastructure.Entities

<RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="Add new customer" Click="@InsertRow"/>
<RadzenDataGrid @ref="CustomersGrid" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced"
		AllowSorting="true" PageSize="10" AllowPaging="true" ShowPagingSummary="true" EditMode="DataGridEditMode.Single"
		Data="@Customers" ColumnWidth="100px" LogicalFilterOperator="LogicalFilterOperator.Or" AllowColumnReorder="true" 
		SelectionMode="DataGridSelectionMode.Single">
	<Columns>
		<RadzenDataGridColumn Property="@nameof(Customer.Id)" Title="ID" Frozen="true" TextAlign="TextAlign.Center"/>
		<RadzenDataGridColumn Property="@nameof(Customer.PhotoUrl)" Title="Photo" TextAlign="TextAlign.Center">
			<Template Context="customer">
				<RadzenImage Path="@customer.PhotoUrl" AlternateText="@($"{customer.FirstName} {customer.LastName}")" class="rz-gravatar"/>
			</Template>
			<EditTemplate Context="customer">
				<RadzenTextBox @bind-value="customer.PhotoUrl" Name="@nameof(Customer.PhotoUrl)"/>
			</EditTemplate>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn Property="@nameof(Customer.FirstName)" Title="First name" TextAlign="TextAlign.Center">
			<EditTemplate Context="customer">
				<RadzenTextBox @bind-value="customer.FirstName" Name="@nameof(Customer.FirstName)"/>
			</EditTemplate>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn Property="@nameof(Customer.LastName)" Title="Last name" TextAlign="TextAlign.Center">
			<EditTemplate Context="customer">
				<RadzenTextBox @bind-value="customer.LastName" Name="@nameof(Customer.LastName)"/>
			</EditTemplate>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn Context="customer" Filterable="false" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
			<Template Context="customer">
				<RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" 
						Click="@(_ => EditRow(customer))"/>
				<RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" 
						Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(_ => DeleteRow(customer))"/>
			</Template>
			<EditTemplate Context="customer">
				<RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" 
						Click="@(_ => SaveRow(customer))" aria-label="Save"/>
				<RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" 
						class="my-1 ms-1" Click="@(_ => CancelEdit(customer))" aria-label="Cancel"/>
			</EditTemplate>
		</RadzenDataGridColumn>
	</Columns>
</RadzenDataGrid>

@code {

	[Inject]
	public DatabaseContext DbContext { get; set; } = null!;

	public RadzenDataGrid<Customer> CustomersGrid { get; set; }

	public DbSet<Customer> Customers => DbContext.Customers;

	public async Task InsertRow()
	{
		await CustomersGrid.InsertRow(new());
	}

	public async Task EditRow(Customer customer)
	{
		await CustomersGrid.EditRow(customer);
	}

	public async Task CancelEdit(Customer customer)
	{
		CustomersGrid.CancelEditRow(customer);
	}

	public async Task DeleteRow(Customer customer)
	{
		if (Customers.Contains(customer))
		{
			Customers.Remove(customer);
			await DbContext.SaveChangesAsync();
		}
		CustomersGrid.CancelEditRow(customer);
		await CustomersGrid.Reload();
	}

	public async Task SaveRow(Customer customer)
	{
		if (!Customers.Contains(customer))
		{
			DbContext.Add(customer);
		}
		await DbContext.SaveChangesAsync();
		await CustomersGrid.UpdateRow(customer);
	}
}